"""
Django settings for MacOS project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

# Try to import decouple, fallback to os.environ for Vercel
try:
    from decouple import config
except ImportError:
    def config(key, default=None, cast=None):
        value = os.environ.get(key, default)
        if cast and value is not None:
            if cast == bool:
                return value.lower() in ('true', '1', 'yes', 'on')
            return cast(value)
        return value

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Debug: Print environment variables on startup
print(f"=== DJANGO STARTUP DEBUG ===")
print(f"DEBUG env: {os.environ.get('DEBUG', 'NOT_SET')}")
print(f"SECRET_KEY env: {os.environ.get('SECRET_KEY', 'NOT_SET')[:10]}...")
print(f"ALLOWED_HOSTS env: {os.environ.get('ALLOWED_HOSTS', 'NOT_SET')}")
print(f"============================")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='woy*3e6#a#r1yqwr8c&0=rv7*q9#zqmo#^())su3glb*g%r&p(')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='my-portfolio-suchitsharma2004s-projects.vercel.app,suchitsharma.vercel.app,localhost,127.0.0.1', cast=lambda v: [s.strip() for s in v.split(',')])


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'portfolio',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'MacOS.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'MacOS.wsgi.application'


# Database - Use in-memory SQLite for serverless environment
# For Vercel, using file-based SQLite can cause issues in serverless functions
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': ':memory:' if not DEBUG else BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'

# Static files directory
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'portfolio/static')]

# Vercel deployment settings with WhiteNoise
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Add static file finders for better discovery
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

# WhiteNoise configuration for Django 5.2+ (with fallback)
try:
    STORAGES = {
        "default": {
            "BACKEND": "django.core.files.storage.FileSystemStorage",
        },
        "staticfiles": {
            "BACKEND": "whitenoise.storage.CompressedStaticFilesStorage",
        },
    }
except Exception as e:
    print(f"STORAGES configuration failed: {e}")
    # Fallback for older Django or if WhiteNoise fails
    try:
        STATICFILES_STORAGE = 'whitenoise.storage.CompressedStaticFilesStorage'
    except Exception:
        STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'

# Production settings for Vercel
if not DEBUG:
    # Security settings for production
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'
    
    # Disable HTTPS enforcement for now to test deployment
    # SECURE_HSTS_SECONDS = 86400
    # SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    # SECURE_HSTS_PRELOAD = True
    # CSRF_COOKIE_SECURE = True
    # SESSION_COOKIE_SECURE = True

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Email Configuration (with error handling)
try:
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = 'smtp.gmail.com'
    EMAIL_PORT = 587
    EMAIL_USE_TLS = True
    EMAIL_USE_SSL = False
    EMAIL_HOST_USER = 'suchit.sharma.delhi@gmail.com'  # Your Gmail address
    EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')  # Gmail App Password from env
    DEFAULT_FROM_EMAIL = 'suchit.sharma.delhi@gmail.com'
    
    # Contact form settings
    CONTACT_EMAIL = 'suchit.sharma.delhi@gmail.com'  # Where to send contact form emails
except Exception as e:
    print(f"Email configuration error: {e}")
    # Fallback to console backend if email setup fails
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
